#define _CRT_SECURE_NO_WARNINGS 1
////作业内容
////BC100 - 有序序列合并
////提交牛客网提交代码截图和提交通过的2张截图
//// 
////描述
////输入两个升序排列的序列，将两个序列合并为一个有序序列并输出。
////数据范围： 1 \le n, m \le 1000 \1≤n, m≤1000  ， 序列中的值满足 0 \le val \le 30000 \0≤val≤30000
////输入描述：
////输入包含三行，
////第一行包含两个正整数n, m，用空格分隔。n表示第二行第一个升序序列中数字的个数，m表示第三行第二个升序序列中数字的个数。
////第二行包含n个整数，用空格分隔。
////第三行包含m个整数，用空格分隔。
////输出描述：
////输出为一行，输出长度为n + m的升序序列，即长度为n的升序序列和长度为m的升序序列中的元素重新进行升序序列排列合并。
////示例1
////输入：
////5 6
////1 3 7 9 22
////2 8 10 17 33 44
////输出：
////1 2 3 7 8 9 10 17 22 33 44
//
//#include<stdio.h>
//int main() 
//{
//    int n,m, tmp;
//    scanf("%d %d", &n, &m);
//    int arr[10000];
//    for (int i = 0; i < n; i++) 
//    {
//        scanf("%d", &arr[i]);
//    }
//
//    for (int j = n; j < n + m; j++) 
//    {
//        scanf("%d", &arr[j]);
//    }
//    for (int i = 0; i < n + m; i++) 
//    {
//        for (int j = i + 1; j< n + m; j++) 
//        {
//            if (arr[i] > arr[j]) 
//            {
//                tmp = arr[i];
//                arr[i] = arr[j];
//                arr[j] = tmp;
//            }
//        }
//    }
//    for (int i = 0; i < n + m; i++) 
//    {
//        printf("%d ", arr[i]);
//    }
//    return 0;
//}



////描述
////KiKi想获得某年某月有多少天，请帮他编程实现。输入年份和月份，计算这一年这个月有多少天。
////输入描述：
////多组输入，一行有两个整数，分别表示年份和月份，用空格分隔。
////输出描述：
////针对每组输入，输出为一行，一个整数，表示这一年这个月有多少天。
////示例1
////输入：
////2008 2
////输出：
////29
//
//#include<stdio.h>
//int main()
//{
//    int year, month,day;
//    while ((scanf("%d%d", &year, &month)) !=EOF )
//    {
//        switch (month) {
//        case 1: case 3: case 5:case 7: case 8:case 10:case 12:
//            day = 31;
//            break;
//
//        case 4: case 6:case 9:case 11:
//            day = 30;
//            break;
//
//        case 2:
//            if (((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0))
//            {
//                day = 29;
//            }
//            else
//            {
//                day = 28;
//            }
//            break;
//        }
//        printf("%d\n", day);
//    }
//    return 0;
//}


//描述
//变种水仙花数 - Lily Number：把任意的数字，从中间拆分成两个数字，比如1461 可以拆分成（1和461）, （14和61）, 
//（146和1), 如果所有拆分后的乘积之和等于自身，则是一个Lily Number。
//例如：
//655 = 6 * 55 + 65 * 5
//1461 = 1 * 461 + 14 * 61 + 146 * 1
//求出 5位数中的所有 Lily Number。
//输入描述：
//无
//输出描述：
//一行，5位数中的所有 Lily Number，每两个数之间间隔一个空格。


#include<stdio.h>
int main() 
{
    for (int i = 10000; i < 99999; i++)
    { 
        int a = (i / 10000) * (i % 10000);
        int b = (i / 1000) * (i % 1000);
        int c = (i / 100) * (i % 100); 
        int d = (i / 10) * (i % 10); 
        int sum = a + b + c + d;
        if (i == sum) 
        {
            printf("%d ", i);
        }
    }
    return 0;
}